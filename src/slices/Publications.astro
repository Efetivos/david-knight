---
import { asHTML } from "@prismicio/helpers";
const { slice } = Astro.props;
import { createClient } from "../lib/prismic.js";
const client = createClient();


// ---------- fetch articles from Group<Content Relationship> ----------
const group = slice?.items || [];
const linkedIds = group
	.map((g) => g?.article?.id)
	.filter(Boolean);

// Fetch all linked articles in a single request
const relatedArticlesRaw = linkedIds.length ? await client.getAllByIDs(linkedIds) : [];

// (Optional) preserve the order defined in the group
const order = new Map(linkedIds.map((id, i) => [id, i]));
const relatedArticles = [...relatedArticlesRaw].sort((a, b) => (order.get(a.id) ?? 0) - (order.get(b.id) ?? 0));

// Helper to pull images from the article_cover slice (repeat)
const coverItemsFrom = (doc) => {
const coverSlice = (doc?.data?.body || []).find((s) => s.slice_type === "article_cover");
return (coverSlice?.items || [])
	.filter((it) => it?.image?.url)
	.map((it, i) => ({
	url: it.image.url,
	alt: it.image_title || it.image?.alt || `Cover image ${i + 1}`,
	}));
};

// Shape minimal fields for rendering
const shape = (doc, index) => ({
	index,
	uid: doc.uid,
	title: doc.data?.meta_title || asText(doc.data?.title) || doc.uid,
	excerpt: doc.data?.excerpt || doc.data?.meta_description || "",
	cover: doc.data?.meta_img?.url || doc.data?.cover_image?.url || "",
	mediaItems: coverItemsFrom(doc),
});
const items = relatedArticles.map(shape);
---

<section class="publications">
    <div class="publications__hold e-hold">
        <div class="publications__subt">
            <div class="publications__subtitle">{slice?.primary?.title}</div>
        </div>
        <ul role="list" class="publications__list w-list-unstyled">
            {items.map((post) => (
            <li class="publications__each">
                <div class="publications__texts">
                    <a href={`/articles/${post.uid}`} class="publications__each__title w-inline-block">
                        <div class="publications__index">
                            {String(post.index + 1).padStart(3, "0")}.
                        </div>
                        <h1 class="publications__title">{post.title}</h1>
                    </a>
                    { post.excerpt &&  <div class="rich" set:html={asHTML(post.excerpt)} /> }
                    <a href={`/articles/${post.uid}`} class="publications__each__button">READ MORE</a>
                </div>
                <div class="publications__media cover-media">
                    <ul role="list" class="publications__media__list w-list-unstyled">
                        {post.mediaItems.length > 0 ? post.mediaItems.map((img) => (
                        <li class="publications__media__each cover-media__each">
                            <div class="publications__media__soft">
                                <img src={`${img.url}&w=800&auto=compress,format`} loading="lazy" alt={img.alt} />
                            </div>
                        </li>
                        ))
                        : (post.cover && (
                        <li class="publications__media__each cover-media__each">
                            <div class="publications__media__soft">
                                <img src={`${post.cover}&w=1200&auto=compress,format`} loading="lazy" alt={post.title} />
                            </div>
                        </li>
                        ))}
                    </ul>
                    {post.mediaItems.length > 1 && (
                    <ul role="list" class="publications__bullets w-list-unstyled">
                        {post.mediaItems.map((_, i) => (
                        <li class="publications__bullet cover-media__bullet">
                            <a href="#" class="publications__bullet__btn w-button" aria-label={`Go to image ${i + 1}`}></a>
                        </li>
                        ))}
                    </ul>
                    )}
                </div>
            </li>
            ))}
        </ul>
    </div>
</section>
